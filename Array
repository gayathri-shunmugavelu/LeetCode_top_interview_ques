Given a sorted array nums, remove the duplicates in-place such that each element appear only once and return the new length.

Do not allocate extra space for another array, you must do this by modifying the input array in-place with O(1) extra memory.


Given nums = [1,1,2],

Your function should return length = 2, with the first two elements of nums being 1 and 2 respectively.

It doesn't matter what you leave beyond the returned length.



=====================================================================================================================================

class Solution {
    public int removeDuplicates(int[] nums) {
         if (nums.length==0 || nums.length==1) 
            return nums.length; 
       
        int[] temp = new int[nums.length]; 
          
        // Start traversing elements 
        int j = 0; 
        for (int i=0; i<nums.length-1; i++) 
            // If current element is not equal 
            // to next element then store that 
            // current element 
            if (nums[i] != nums[i+1]) 
                temp[j++] = nums[i]; 
          
        // Store the last element as whether 
        // it is unique or repeated, it hasn't 
        // stored previously 
        temp[j++] = nums[nums.length-1];    
          
        // Modify original array 
        for (int i=0; i<j; i++) 
            nums[i] = temp[i]; 
       
        return j; 
    
    }
}


